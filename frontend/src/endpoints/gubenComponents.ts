/**
 * Generated by @openapi-codegen
 *
 * @version 1.0.0
 */
import * as reactQuery from "@tanstack/react-query";
import { useGubenContext, GubenContext } from "./gubenContext";
import type * as Fetcher from "./gubenFetcher";
import { gubenFetch } from "./gubenFetcher";
import type * as Schemas from "./gubenSchemas";

export type UsersGetAllError = Fetcher.ErrorWrapper<{
  status: 400;
  payload: Schemas.ProblemDetails;
}>;

export type UsersGetAllVariables = GubenContext["fetcherOptions"];

export const fetchUsersGetAll = (
  variables: UsersGetAllVariables,
  signal?: AbortSignal,
) =>
  gubenFetch<
    Schemas.GetAllUsersResponse,
    UsersGetAllError,
    undefined,
    {},
    {},
    {}
  >({ url: "/users", method: "get", ...variables, signal });

export const useUsersGetAll = <TData = Schemas.GetAllUsersResponse,>(
  variables: UsersGetAllVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.GetAllUsersResponse,
      UsersGetAllError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useGubenContext(options);
  return reactQuery.useQuery<
    Schemas.GetAllUsersResponse,
    UsersGetAllError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/users",
      operationId: "usersGetAll",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchUsersGetAll({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type UsersCreateUserError = Fetcher.ErrorWrapper<{
  status: 400;
  payload: Schemas.ProblemDetails;
}>;

export type UsersCreateUserVariables = {
  body: Schemas.CreateUserQuery;
} & GubenContext["fetcherOptions"];

export const fetchUsersCreateUser = (
  variables: UsersCreateUserVariables,
  signal?: AbortSignal,
) =>
  gubenFetch<
    Schemas.CreateUserResponse,
    UsersCreateUserError,
    Schemas.CreateUserQuery,
    {},
    {},
    {}
  >({ url: "/users", method: "post", ...variables, signal });

export const useUsersCreateUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.CreateUserResponse,
      UsersCreateUserError,
      UsersCreateUserVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGubenContext();
  return reactQuery.useMutation<
    Schemas.CreateUserResponse,
    UsersCreateUserError,
    UsersCreateUserVariables
  >({
    mutationFn: (variables: UsersCreateUserVariables) =>
      fetchUsersCreateUser({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type UsersGetPathParams = {
  keycloakId: string;
};

export type UsersGetError = Fetcher.ErrorWrapper<{
  status: 400;
  payload: Schemas.ProblemDetails;
}>;

export type UsersGetVariables = {
  pathParams: UsersGetPathParams;
} & GubenContext["fetcherOptions"];

export const fetchUsersGet = (
  variables: UsersGetVariables,
  signal?: AbortSignal,
) =>
  gubenFetch<
    Schemas.GetUserResponse,
    UsersGetError,
    undefined,
    {},
    {},
    UsersGetPathParams
  >({ url: "/users/{keycloakId}", method: "get", ...variables, signal });

export const useUsersGet = <TData = Schemas.GetUserResponse,>(
  variables: UsersGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.GetUserResponse, UsersGetError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useGubenContext(options);
  return reactQuery.useQuery<Schemas.GetUserResponse, UsersGetError, TData>({
    queryKey: queryKeyFn({
      path: "/users/{keycloakId}",
      operationId: "usersGet",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchUsersGet({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type ProjectsGetAllError = Fetcher.ErrorWrapper<{
  status: 400;
  payload: Schemas.ProblemDetails;
}>;

export type ProjectsGetAllVariables = GubenContext["fetcherOptions"];

export const fetchProjectsGetAll = (
  variables: ProjectsGetAllVariables,
  signal?: AbortSignal,
) =>
  gubenFetch<
    Schemas.GetAllProjectsResponse,
    ProjectsGetAllError,
    undefined,
    {},
    {},
    {}
  >({ url: "/projects", method: "get", ...variables, signal });

export const useProjectsGetAll = <TData = Schemas.GetAllProjectsResponse,>(
  variables: ProjectsGetAllVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.GetAllProjectsResponse,
      ProjectsGetAllError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useGubenContext(options);
  return reactQuery.useQuery<
    Schemas.GetAllProjectsResponse,
    ProjectsGetAllError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/projects",
      operationId: "projectsGetAll",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchProjectsGetAll({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type LocationsGetAllError = Fetcher.ErrorWrapper<{
  status: 400;
  payload: Schemas.ProblemDetails;
}>;

export type LocationsGetAllVariables = GubenContext["fetcherOptions"];

export const fetchLocationsGetAll = (
  variables: LocationsGetAllVariables,
  signal?: AbortSignal,
) =>
  gubenFetch<
    Schemas.GetAllLocationsResponse,
    LocationsGetAllError,
    undefined,
    {},
    {},
    {}
  >({ url: "/locations", method: "get", ...variables, signal });

export const useLocationsGetAll = <TData = Schemas.GetAllLocationsResponse,>(
  variables: LocationsGetAllVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.GetAllLocationsResponse,
      LocationsGetAllError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useGubenContext(options);
  return reactQuery.useQuery<
    Schemas.GetAllLocationsResponse,
    LocationsGetAllError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/locations",
      operationId: "locationsGetAll",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchLocationsGetAll({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type LocationsGetOrCreateError = Fetcher.ErrorWrapper<{
  status: 400;
  payload: Schemas.ProblemDetails;
}>;

export type LocationsGetOrCreateVariables = GubenContext["fetcherOptions"];

export const fetchLocationsGetOrCreate = (
  variables: LocationsGetOrCreateVariables,
  signal?: AbortSignal,
) =>
  gubenFetch<
    Schemas.GetAllLocationsResponse,
    LocationsGetOrCreateError,
    undefined,
    {},
    {},
    {}
  >({ url: "/locations", method: "post", ...variables, signal });

export const useLocationsGetOrCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.GetAllLocationsResponse,
      LocationsGetOrCreateError,
      LocationsGetOrCreateVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGubenContext();
  return reactQuery.useMutation<
    Schemas.GetAllLocationsResponse,
    LocationsGetOrCreateError,
    LocationsGetOrCreateVariables
  >({
    mutationFn: (variables: LocationsGetOrCreateVariables) =>
      fetchLocationsGetOrCreate({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type EventsGetAllQueryParams = {
  title?: string;
  location?: string;
  /**
   * @format int32
   * @default 1
   */
  pageNumber?: number;
  /**
   * @format int32
   * @default 2
   */
  pageSize?: number;
};

export type EventsGetAllError = Fetcher.ErrorWrapper<{
  status: 400;
  payload: Schemas.ProblemDetails;
}>;

export type EventsGetAllVariables = {
  queryParams?: EventsGetAllQueryParams;
} & GubenContext["fetcherOptions"];

export const fetchEventsGetAll = (
  variables: EventsGetAllVariables,
  signal?: AbortSignal,
) =>
  gubenFetch<
    Schemas.GetAllEventsResponse,
    EventsGetAllError,
    undefined,
    {},
    EventsGetAllQueryParams,
    {}
  >({ url: "/events", method: "get", ...variables, signal });

export const useEventsGetAll = <TData = Schemas.GetAllEventsResponse,>(
  variables: EventsGetAllVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.GetAllEventsResponse,
      EventsGetAllError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useGubenContext(options);
  return reactQuery.useQuery<
    Schemas.GetAllEventsResponse,
    EventsGetAllError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/events",
      operationId: "eventsGetAll",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchEventsGetAll({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type CategoriesGetAllError = Fetcher.ErrorWrapper<{
  status: 400;
  payload: Schemas.ProblemDetails;
}>;

export type CategoriesGetAllVariables = GubenContext["fetcherOptions"];

export const fetchCategoriesGetAll = (
  variables: CategoriesGetAllVariables,
  signal?: AbortSignal,
) =>
  gubenFetch<
    Schemas.GetAllCategoriesResponse,
    CategoriesGetAllError,
    undefined,
    {},
    {},
    {}
  >({ url: "/categories", method: "get", ...variables, signal });

export const useCategoriesGetAll = <TData = Schemas.GetAllCategoriesResponse,>(
  variables: CategoriesGetAllVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.GetAllCategoriesResponse,
      CategoriesGetAllError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useGubenContext(options);
  return reactQuery.useQuery<
    Schemas.GetAllCategoriesResponse,
    CategoriesGetAllError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/categories",
      operationId: "categoriesGetAll",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchCategoriesGetAll({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type QueryOperation =
  | {
      path: "/users";
      operationId: "usersGetAll";
      variables: UsersGetAllVariables;
    }
  | {
      path: "/users/{keycloakId}";
      operationId: "usersGet";
      variables: UsersGetVariables;
    }
  | {
      path: "/projects";
      operationId: "projectsGetAll";
      variables: ProjectsGetAllVariables;
    }
  | {
      path: "/locations";
      operationId: "locationsGetAll";
      variables: LocationsGetAllVariables;
    }
  | {
      path: "/events";
      operationId: "eventsGetAll";
      variables: EventsGetAllVariables;
    }
  | {
      path: "/categories";
      operationId: "categoriesGetAll";
      variables: CategoriesGetAllVariables;
    };
